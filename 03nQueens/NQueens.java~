public class NQueens{
    //terminal specific character to clear screen , or hide/show cursor
    final static String clear =  "\033[2J";
    final static String hide =  "\033[?25l";
    final static String show =  "\033[?25h";

    //instance variables
    private int[][]board;

    //terminal specific character to move the cursor
    private String go(int x,int y){
	return ("\033[" + x + ";" + y + "H");
    }
 
    public void wait(int millis){
	try {
	    Thread.sleep(millis);
	}
	catch (InterruptedException e) {
	}
    }
    public NQueens(int size){
	board = new int[size][size];
    }

    public String toString(){
	String ans = "\n";
	for(int i = 0; i < board.length; i ++){
	    for (int j = 0; j < board[0].length; j++){
		ans += board[i][j] + " ";
	    }
	    ans += "\n";
	}
    
	return hide + clear + go(0,0) + ans + "\n" + show;
    }

    public String name(){
	return "dickersin.nino";
    }

    public boolean solve(){
	return solve(0);
    }
    
    public boolean solve(int x){
	return solve(0, x);
    }
    
    public boolean solve(int x, int y){
	if (x < 0 || y < 0 || x > board[0].length - 1 || y > board.length - 1){
	    return false;
	}
	int qCount = 0;
	for(int i = 0; i < board.length; i ++){
	    for (int j = 0; j < board[0].length; j++){
		if (board[i][j] > 0){
		    qCount ++;
		}
	    }
	}
	System.out.println(this);
	wait(20);
	//base case
	if(qCount == 8){
	    return true;
	}
	//0s are empty spaces, 1s are queens, 2s are spaces where queens can't be placed
	if (board[x][y] == 0){
	    board[x][y] = 1;
	    for (int i = 0; i < board[0].length; i ++){

	    }
	    if(solve(x, y + 1) || solve(x + 1, y + 1) || solve(x + 1, y) || solve(x + 1, y - 1) || solve(x , y - 1) || solve(x - 1, y - 1) || solve(x - 1, y) || solve(x - 1, y + 1)){
		return true;
	    }
	    board[x][y] = 0;
	}
	return false;
    }


    public static void main(String[]args){
	NQueens a = new NQueens(8);
	a.solve();
    }
}
